@using System.Globalization;
@model EditStoreModel
@{
    if (Model.IsNew)
    {
        ViewData["Title"] = "Add New Store";
    }
    else
    {
        ViewData["Title"] = "Edit " + Model.Store.Name;
    }

    string[] daysOfWeek = { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
}

<h1>@Model.Store.Name</h1>
<p>Make any changes to this store.</p>

<div id="alertPlaceholder"></div>

<div class="row">
    <div class="col-6">

        <!-- General -->
        <div class="card mb-4 rounded-3 shadow-sm">
            <div class="card-header py-3">
                <h4 class="my-0 fw-normal">Store Details</h4>
            </div>
            <div class="card-body">
                <form id="storeDetails" class="row g-3">

                    <div class="col-md-6">
                        <label asp-for="Store.Name" class="form-label">Name *</label>
                        <input asp-for="Store.Name" type="text" class="form-control">
                        <span asp-validation-for="Store.Name" class="text-danger"></span>
                    </div>
                    <div class="col-md-6">
                        <label asp-for="Store.Id" class="form-label">Store ID *</label>
                        <input asp-for="Store.Id" type="text" class="form-control">
                        <span asp-validation-for="Store.Id" class="text-danger"></span>
                    </div>

                    <div class="col-md-6">
                        <label asp-for="Store.Address.StreetAddressLine1" class="form-label">Address *</label>
                        <input asp-for="Store.Address.StreetAddressLine1" type="text" class="form-control">
                        <span asp-validation-for="Store.Address.StreetAddressLine1" class="text-danger"></span>
                    </div>
                    <div class="col-md-6">
                        <label asp-for="Store.Address.City" class="form-label">City *</label>
                        <input asp-for="Store.Address.City" type="text" class="form-control">
                        <span asp-validation-for="Store.Address.City" class="text-danger"></span>
                    </div>

                    <div class="col-md-6">
                        <label asp-for="Store.Address.PostalCode" class="form-label">Postcode</label>
                        <input asp-for="Store.Address.PostalCode" type="text" class="form-control">
                        <span asp-validation-for="Store.Address.PostalCode" class="text-danger"></span>
                    </div>
                    <div class="col-md-6">
                        <label asp-for="Store.Address.CountryName" class="form-label">Country *</label>
                        <select asp-for="Store.Address.CountryName" class="form-select">
                            <option>Choose...</option>
                            @foreach (var country in Model.Countries)
                            {
                                if (country.Id == Model.Store.Address.CountryCode)
                                {
                                    <option value="@country.Id" selected>@country.Name</option>
                                }
                                else
                                {
                                    <option value="@country.Id">@country.Name</option>
                                }
                            }
                        </select>
                        <span asp-validation-for="Store.Address.CountryName" class="text-danger"></span>
                    </div>

                    <div class="col-md-6">
                        <label asp-for="Store.Location.Coordinates[0]" class="form-label">Longitude</label>
                        <input asp-for="Store.Location.Coordinates[0]" type="number" class="form-control">
                        <span asp-validation-for="Store.Location.Coordinates[0]" class="text-danger"></span>
                    </div>
                    <div class="col-md-6">
                        <label asp-for="Store.Location.Coordinates[1]" class="form-label">Latitude</label>
                        <input asp-for="Store.Location.Coordinates[1]" type="number" class="form-control">
                        <span asp-validation-for="Store.Location.Coordinates[1]" class="text-danger"></span>
                    </div>

                    <div class="col-12">
                        <label asp-for="Store.WebUrl" class="form-label">Website</label>
                        <input asp-for="Store.WebUrl" type="url" class="form-control">
                        <span asp-validation-for="Store.WebUrl" class="text-danger"></span>
                    </div>

                    <div class="col-12">
                        <label asp-for="Store.ImageUrl" class="form-label">Store logo or photo Url</label>
                        <input asp-for="Store.ImageUrl" type="url" class="form-control">
                        <span asp-validation-for="Store.ImageUrl" class="text-danger"></span>
                    </div>

                    <div class="col-md-6">
                        <label asp-for="Store.Email" class="form-label">Email address</label>
                        <input asp-for="Store.Email" type="email" class="form-control">
                        <span asp-validation-for="Store.Email" class="text-danger"></span>
                    </div>
                    <div class="col-md-6">
                        <label asp-for="Store.PhoneNumber" class="form-label">Phone number</label>
                        <input asp-for="Store.PhoneNumber" type="tel" class="form-control">
                        <span asp-validation-for="Store.PhoneNumber" class="text-danger"></span>
                    </div>

                    <div class="col-12">
                        <label asp-for="Store.Note" class="form-label">Notes</label>
                        <textarea asp-for="Store.Note" class="form-control" rows="3"></textarea>
                        <span asp-validation-for="Store.Note" class="text-danger"></span>
                    </div>

                    <div class="col-12">
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </form>
            </div>
        </div>

    </div>

    <div class="col-6">

        <!-- Location -->
        <div class="card mb-4 rounded-3 shadow-sm">
            <div class="card-header py-3">
                <h4 class="my-0 fw-normal">Location</h4>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-12">
                        <!-- Azure Maps Control -->
                        <div id="locator-map" role="application" class="w-100 h-100 p-5 bg-body-tertiary border rounded-3 py-3" style="min-height: 300px;"></div>
                    </div>
                    <div class="col-12">
                        <button id="geocodeButton" class="btn btn-primary">Geocode from address</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Opening hours -->
        <div class="list-group mb-4 rounded-3 shadow-sm">
            @foreach (var day in daysOfWeek)
            {
                var details = Model.Store.OpeningHours.FirstOrDefault(o => o.DayOfWeek == day);

                <label class="list-group-item d-flex gap-3">
                    <input id="@day" class="form-check-input flex-shrink-0" type="checkbox" style="font-size: 1.375em;" @(details != null ? "checked" : "")>
                    <span class="pt-1">
                        <strong>@day</strong>
                    </span>
                    <span class="pt-1">
                        <label for="@(day)Open" class="form-label">Open</label>
                        <input type="time" id="@(day)Open" value="@(details != null ? details.Open : "")" class="form-control">
                    </span>
                    <span class="pt-1">
                        <label for="@(day)Close" class="form-label">Close</label>
                        <input type="time" id="@(day)Close" value="@(details != null ? details.Close : "")" class="form-control">
                    </span>
                </label>
            }
        </div>

    </div>
</div>

<div class="row">
    <div class="col-12">

        <!-- Features -->
        <div class="card mb-4 rounded-3 shadow-sm">
            <div class="card-header py-3">
                <h4 class="my-0 fw-normal">Features</h4>
            </div>
            <div class="card-body d-flex gap-3" id="locator-filters">
                @foreach (var feature in Model.Features)
                {
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>@feature.Name</strong>
                        </li>
                        @foreach (var tag in feature.Tags)
                        {
                            <li class="list-group-item">
                                <input class="form-check-input me-1" onchange="handleCheckboxChange(this)" value="@tag.Id" type="checkbox" @(Model.Store.Features.Contains(tag.Id) ? "checked" : "") id="tag-@tag.Id">
                                <label class="form-check-label" for="tag-@tag.Id">@tag.Name</label>
                            </li>
                        }
                    </ul>
                }
            </div>
        </div>

    </div>
</div>

@section stylesheets {
    <!-- Azure Maps Map Control stylesheet -->
    <link rel="stylesheet" href="https://atlas.microsoft.com/sdk/javascript/mapcontrol/3/atlas.min.css" crossorigin="anonymous">
}

@section scripts {
    <!-- Azure Maps Map Control script -->
    <script src="https://atlas.microsoft.com/sdk/javascript/mapcontrol/3/atlas.min.js" crossorigin="anonymous"></script>

    @{
        await Html.RenderPartialAsync("_AdminScripts");

        var longitude = Convert.ToString(Model.Store.Location.Coordinates[0], CultureInfo.InvariantCulture);
        var latitude = Convert.ToString(Model.Store.Location.Coordinates[1], CultureInfo.InvariantCulture);
    }

    <script>

        let map, marker;

        var features = [@Html.Raw(string.Join(", ", Model.Store.Features.Select(day => "'" + day + "'")))];

        function handleCheckboxChange(checkbox) {
            if (checkbox.checked) {
                features.push(checkbox.value);
            } else {
                var index = features.indexOf(checkbox.value);

                if (index !== -1) {
                    features.splice(index, 1);
                }
            }
        }

        @if(!Model.IsNew)
        {
            @Html.Raw("$('#Store_Id').disabled = true;");
            @Html.Raw("$('#Store_Address_CountryName').disabled = true;");
        }

        const alertPlaceholder = $('#alertPlaceholder');

        // Show an alert on the page.
        function appendAlert(message, type) {
            alertPlaceholder.append(`<div class="alert alert-${type} alert-dismissible" role="alert">${message}<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>`);
        }

        // Geocode button click
        $('#geocodeButton').click(async (event) => {
            const address = $('#Store_Address_StreetAddressLine1').val();
            const city = $('#Store_Address_City').val();
            const postalcode = $('#Store_Address_PostalCode').val();
            const country = $('#Store_Address_CountryName option:selected').text();

            if (address && city && country) {
                const requestUrl = `https://{azMapsDomain}/geocode?api-version=2022-12-01-preview&query=${address}, ${city}, ${postalcode}, ${country}`;
                const response = await this.processRequest(requestUrl);

                if (response && response.features) {
                    // We only take the first geocoded address coordinates.
                    var coordinates = response.features[0].geometry.coordinates;

                    // Store the coordinates in the form
                    $('#Store_Location_Coordinates_0_').val(coordinates[0]);
                    $('#Store_Location_Coordinates_1_').val(coordinates[1]);

                    // Update the marker on the map
                    marker.setOptions({
                        position: coordinates
                    });

                    // Center the map on the marker
                    map.setCamera({
                        center: coordinates,
                        zoom: 16
                    });
                } else {
                    appendAlert('Apologies, we were unable to perform geocoding for the provided address details.', 'danger');
                }
            } else {
                appendAlert('Please provide the address details before we can proceed with geocoding.', 'warning');
            }
        });

        // Save button click.
        $('#storeDetails').submit(event => {
            event.preventDefault();

            // Process store details before save.
            const store = {
                id: $('#Store_Id').val(),
                storeNumber: "",
                name: $('#Store_Name').val(),
                address: {
                    streetAddressLine1: $('#Store_Address_StreetAddressLine1').val(),
                    streetAddressLine2: "",
                    streetAddressLine3: "",
                    city: $('#Store_Address_City').val(),
                    postalCode: $('#Store_Address_PostalCode').val(),
                    countrySubdivisionCode: "",
                    countryCode: $('#Store_Address_CountryName').val(),
                    countryName: $('#Store_Address_CountryName option:selected').text(),
                },
                email: $('#Store_Email').val(),
                phoneNumber: $('#Store_PhoneNumber').val(),
                location: { coordinates: [$('#Store_Location_Coordinates_0_').val(), $('#Store_Location_Coordinates_1_').val()] },
                imageUrl: $('#Store_ImageUrl').val(),
                webUrl: $('#Store_WebUrl').val(),
                timeZoneUtc: 0, // UTC
                openingHours: [],
                features: features,
                note: $('#Store_Note').val()
            };

            const daysOfWeek = [@Html.Raw(string.Join(", ", daysOfWeek.Select(day => "'" + day + "'")))];

            // Opening hours
            for (const day of daysOfWeek) {
                const open = $(`#${day}Open`).val();
                const close = $(`#${day}Close`).val();

                if ($(`#${day}`).is(':checked')) {
                    store.openingHours.push({ dayOfWeek: day, open: open, close: close });
                }
            }

            // Save store details
            $.ajax({
                type: '@(Model.IsNew ? "POST" : "PUT")',
                url: '/api/stores',
                contentType: 'application/json',
                data: JSON.stringify(store),
                success: () => appendAlert('Store details saved successfully.', 'success'),
                error: e => {
                    if (e.responseJSON && e.responseJSON.errors) {
                        const errors = e.responseJSON.errors;
                        for (const key in errors) {
                            if (errors.hasOwnProperty(key)) {
                                errors[key].forEach(errorMessage => appendAlert(`Validation Error: ${errorMessage}`, 'danger'));
                            }
                        }
                    } else {
                        appendAlert('Failed to save store details, please try again!', 'danger');
                    }
                }
            });
        });

        // Initialize an Azure Maps instance
        map = new atlas.Map('locator-map', {
            zoom: 16,
            center: [@longitude, @latitude],
            style: 'grayscale_light',
            view: 'Auto',

            // Add authentication details for connecting to Azure Maps
            authOptions: {
                // Use Azure Active Directory authentication in production
                authType: 'anonymous',
                // Your Azure Maps client id for accessing your Azure Maps account
                clientId: '@Model.AzureMapsClientId',
                getToken: function (resolve, reject, map) {
                    // URL to your authentication service that retrieves an Azure Active Directory Token
                    fetch('@Model.AzureMapsTokenUrl')
                        .then(function (response) {
                            return response.text();
                        })
                        .then(function (token) {
                            resolve(token);
                        })
                        .catch(function (error) {
                            reject(new Error(`Failed to fetch Azure Maps token: ${error.message}`));
                        });
                }
            }
        });

        // Wait until the map resources are ready.
        map.events.add('ready', () => {
            // Add controls to the map.
            map.controls.add([
                new atlas.control.ZoomControl(),
                new atlas.control.StyleControl({
                    mapStyles: ['road', 'satellite', 'satellite_road_labels', 'night', 'grayscale_light', 'grayscale_dark', 'road_shaded_relief', 'high_contrast_light', 'high_contrast_dark']
                }),
                new atlas.control.TrafficControl()
            ], {
                position: 'top-right'
            });

            // Create a draggable HTML marker.
            marker = new atlas.HtmlMarker({
                draggable: true,
                color: 'Red',
                position: [@longitude, @latitude]
            });

            // Add a drag event to get the position of the marker.
            // Markers support drag, dragstart and dragend events.
            map.events.add('drag', marker, function () {
                var pos = marker.getOptions().position;

                // Round longitude,latitude values to 5 decimal places.
                $('#Store_Location_Coordinates_0_').val(Math.round(pos[0] * 100000) / 100000);
                $('#Store_Location_Coordinates_1_').val(Math.round(pos[1] * 100000) / 100000);
            });

            // Add the marker to the map.
            map.markers.add(marker);
        });

        // This is a reusable function that sets the Azure Maps platform domain,
        // signs the request, and makes use of any transformRequest set on the map.
        async function processRequest(url) {
            // Replace the domain placeholder to ensure the same Azure Maps is used throughout the app.
            url = url.replace('{azMapsDomain}', atlas.getDomain());

            // Get the authentication details from the map for use in the request.
            var requestParams = map.authentication.signRequest({ url: url });

            // Transform the request.
            var transform = map.getServiceOptions().tranformRequest;
            if (transform) requestParams = transform(url);

            const response = await fetch(requestParams.url, {
                method: 'GET',
                mode: 'cors',
                headers: new Headers(requestParams.headers)
            });

            if (!response.ok) {
                throw new Error(`Network response was not ok: ${response.status} ${response.statusText}`);
            }

            return await response.json();
        }

    </script>
}