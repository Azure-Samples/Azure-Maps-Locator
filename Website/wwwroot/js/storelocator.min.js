class storelocator{map=null;options=null;search={url:"https://{azMapsDomain}/search/fuzzy/json?api-version=1.0&query={query}&typeahead={typeahead}&limit={limit}&countrySet={countrySet}&language={language}&lat={lat}&lon={lon}&view={view}",control:null,features:[],input:{minLength:3,currentLength:0,keyStrokeDelay:250},autocomplete:{control:null,locateMeTemplate:"",locationsTemplate:"",storesTemplate:""},resultsControl:null,resultsTemplate:"",datasource:new atlas.source.DataSource,userLocation:[0,0]};isochrone={url:"https://{azMapsDomain}/route/range/json?api-version=1.0&query={query}&traffic={traffic}&travelMode={travelMode}&timeBudgetInSec={timeBudgetInSec}",walkingDataSource:new atlas.source.DataSource,drivingDataSource:new atlas.source.DataSource};store={datasource:new atlas.source.DataSource,popup:new atlas.Popup({position:[0,0],pixelOffset:[0,-18]}),template:""};speech={recognition:window.SpeechRecognition||window.webkitSpeechRecognition};constructor(n,t={}){this.map=n;this.options={countrySet:["US"],language:"en-US",rangeInKm:25,maxSearchResults:5,walkingTime:15,drivingTime:15,...t};this.search.userLocation=n.getCamera().center;this.initializeTemplates();this.initializeSearch();this.initializeIsochroneLayers();this.initializeStoresLayer();this.initializeFilters()}initializeTemplates(){this.store.template=document.getElementById("template-storepopup").innerHTML;this.search.autocomplete.locateMeTemplate=document.getElementById("template-autocomplete-locateMe").innerHTML;this.search.autocomplete.locationsTemplate=document.getElementById("template-autocomplete-locations").innerHTML;this.search.autocomplete.storesTemplate=document.getElementById("template-autocomplete-stores").innerHTML;this.search.resultsTemplate=document.getElementById("template-results").innerHTML}initializeFilters(){this.getFeatures().then(n=>{var t,i;const r=document.getElementById("locator-filters"),u=document.getElementById("template-filters-category").innerHTML,f=document.getElementById("template-filters-tag").innerHTML;t="";for(const r of n){i="";for(const n of r.tags)i+=f.replaceAll("{id}",n.id).replace("{name}",n.name);t+=u.replaceAll("{id}",r.id).replace("{name}",r.name).replace("{expanded}",t==""?"true":"false").replace("{show}",t==""?"show":"").replace("{tags}",i)}r.innerHTML+=t})}initializeSearch(){this.search.autocomplete.control=document.getElementById("locator-autocomplete");this.search.resultsControl=document.getElementById("locator-results");this.search.control=document.getElementById("locator-search");this.search.control.addEventListener("keyup",n=>{this.searchControlKeyupEvent(n)});this.search.control.addEventListener("search",n=>{this.searchControlSearchEvent(n)});this.search.control.addEventListener("focus",()=>{const n=this.search.control.value.trim();n.length==0&&(this.search.autocomplete.control.className="dropdown-menu show",this.search.autocomplete.control.innerHTML=this.search.autocomplete.locateMeTemplate)})}initializeStoresLayer(){const n=new atlas.layer.SymbolLayer(this.store.datasource,"stores",{textOptions:{textField:["get","orderNumber"],offset:[0,-1.5],color:"#ffffff",font:["SegoeUi-Bold"]},iconOptions:{image:"marker-red"}});this.map.sources.add(this.store.datasource);this.map.layers.add(n);this.map.events.add("click",n,n=>{n.shapes&&n.shapes.length>0&&this.showPopup(n.shapes[0])})}initializeIsochroneLayers(){const n=new atlas.layer.LineLayer(this.isochrone.walkingDataSource,"walking",{strokeColor:"Green",strokeWidth:3,strokeDashArray:[3,3]});this.map.sources.add(this.isochrone.walkingDataSource);this.map.layers.add(n);const t=new atlas.layer.LineLayer(this.isochrone.drivingDataSource,"driving",{strokeColor:"Blue",strokeWidth:3,strokeDashArray:[3,3]});this.map.sources.add(this.isochrone.drivingDataSource);this.map.layers.add(t)}handleFilterChange(n){if(n.checked)this.search.features.push(n.value);else{var t=this.search.features.indexOf(n.value);t!==-1&&this.search.features.splice(t,1)}}toggleSpeechButtonState(n,t=false){n.disabled=t;n.className=t?"btn btn-success":"btn btn-outline-secondary"}startSpeechRecognitionClicked(n){this.toggleSpeechButtonState(n,!0);this.startSpeechToText().then(t=>{this.toggleSpeechButtonState(n,!1);const i=t[0][0].transcript.toLowerCase();this.search.control.value=this.removePunctuation(i);this.fuzzySearch(this.search.control.value)}).catch(t=>{this.toggleSpeechButtonState(n,!1),console.error(t)})}startSpeechToText(){return new Promise((n,t)=>{const i=new this.speech.recognition;i.lang=this.options.language;i.continuous=!1;i.interimResults=!1;i.maxAlternatives=1;i.start();i.onresult=t=>n(t.results);i.onspeechend=()=>i.stop();i.onerror=n=>t(n.error)})}removePunctuation(n){return n.replace(/[，。？！、；：]/g,"").replace(/[\.,]/g,"")}showPopup(n){this.store.popup.close();var t=n.getProperties(),i=n.getCoordinates();this.store.popup.setOptions({content:this.store.template.replace("{id}",t.id).replace("{imageUrl}",t.imageUrl).replace("{webUrl}",t.webUrl).replace("{title}",t.name).replace("{name}",t.name).replace("{address}",t.address.streetAddressLine1).replace("{city}",t.address.city).replace("{country}",t.address.countryName).replace("{distanceInKm}",t.distanceInKm.toFixed(1)).replace("{distanceInMile}",this.convertToMiles(t.distanceInKm).toFixed(1)).replace("{directionsUrl}",`https://www.bing.com/maps?rtp=pos.${this.search.userLocation[1]}_${this.search.userLocation[0]}_My%20current%20location~pos.${t.location.coordinates[1]}_${t.location.coordinates[0]}_${t.name}`),position:i});this.store.popup.open(this.map)}storeClicked(n){var t=this.store.datasource.getShapeById(n),i=t.getCoordinates();this.map.setCamera({center:[i[0],i[1]-.001],zoom:16});this.showPopup(t)}searchControlSearchEvent(){const n=this.search.control.value.trim(),t=this.search.input.minLength;n.length<t&&(this.search.autocomplete.control.className="dropdown-menu",this.search.autocomplete.control.innerHTML="")}locateMe(){navigator.geolocation.getCurrentPosition(n=>{this.search.control.value="",this.showNearbyStores([n.coords.longitude,n.coords.latitude])},()=>{alert("Sorry, your position information is unavailable or not accasable!")},{enableHighAccuracy:!0})}searchControlKeyupEvent(n){const r=this.search.control.value.trim(),u=this.search.input.minLength,t=r.length;if(t>=u){if(setTimeout(()=>{this.search.input.currentLength===t&&this.fuzzySearch(r)},this.search.input.keyStrokeDelay),n.keyCode===13){var i=this.search.datasource.getShapes();i&&i.length>0&&this.searchClicked(i[0].data.id)}}else this.search.autocomplete.control.className="dropdown-menu",this.search.autocomplete.control.innerHTML="";this.search.input.currentLength=t}getCategoryIcon=n=>{const t=n>9999?Math.floor(n/1e3):n;switch(t){case 7380:case 9942:return"bi-train-front";case 7383:return"bi-airplane";case 7315:case 9376:case 9361:case 9359:return"bi-shop";case 9663:case 7321:case 9373:case 9374:case 7326:case 9956:case 7391:return"bi-hospital";case 7324:return"bi-envelope";case 7377:case 7372:case 9913:return"bi-mortarboard";case 9352:case 7327:case 7373:case 7328:return"bi-building";case 7311:return"bi-fuel-pump";case 7309:return"bi-ev-station";default:return"bi-geo-alt"}};fuzzySearch(n){const t=this.search.url.replace("{query}",encodeURIComponent(n)).replace("{typeahead}",!0).replace("{countrySet}",this.options.countrySet).replace("{language}",this.options.language).replace("{lon}",this.map.getCamera().center[0]).replace("{lat}",this.map.getCamera().center[1]).replace("{limit}",4).replace("{view}","Auto");Promise.all([this.processRequest(t),this.searchStores(n,4)]).then(n=>{let t="",i=[];t+='<li><h6 class="dropdown-header">Locations<\/h6><\/li>';for(const r of n[0].results){const n=r.poi&&r.poi.name,u=n?this.getCategoryIcon(r.poi.categorySet[0].id):"bi-geo-alt",f=n?r.poi.name:r.address.freeformAddress,e=n?r.address.freeformAddress:"";t+=this.search.autocomplete.locationsTemplate.replace("{id}",r.id).replace("{name}",f).replace("{description}",e).replace("{icon}",u).replace("{longitude}",r.position.lon).replace("{latitude}",r.position.lat);const o=new atlas.data.Position(r.position.lon,r.position.lat),s=new atlas.data.Feature(new atlas.data.Point(o),r,r.id);i.push(s)}n[0].results.length==0&&(t+='<li><a class="dropdown-item disabled" aria-disabled="true">No Results Found<\/a><\/li>');this.search.datasource.clear();this.search.datasource.add(i);t+='<li><hr class="dropdown-divider"><\/li>';t+='<li><h6 class="dropdown-header">Stores<\/h6><\/li>';for(const i of n[1])t+=this.search.autocomplete.storesTemplate.replace("{id}",i.id).replace("{imageUrl}",i.imageUrl).replace("{webUrl}",i.webUrl).replace("{title}",i.name).replace("{name}",i.name).replace("{address}",i.address.streetAddressLine1).replace("{city}",i.address.city).replace("{country}",i.address.countryName);n[1].length==0&&(t+='<li><a class="dropdown-item disabled" aria-disabled="true">No Results Found<\/a><\/li>');this.search.autocomplete.control.innerHTML=t;this.search.autocomplete.control.className="dropdown-menu show"})}searchClicked(n){const i=this.search.datasource.getShapeById(n),r=i.getCoordinates(),t=i.getProperties();this.search.control.value=t.poi&&t.poi.name?t.poi.name:t.address.freeformAddress;this.showNearbyStores(r)}showStoresByCountry(n){this.getStoresByCountry(n).then(n=>{let t=[];n.forEach(n=>{n.distanceInKm=0;const i=new atlas.data.Position(n.location.coordinates[0],n.location.coordinates[1]),r=new atlas.data.Feature(new atlas.data.Point(i),n,n.id);t.push(r)});this.store.datasource.clear();this.store.datasource.add(t);this.map.resize()})}searchFiltersClicked(){this.showNearbyStores()}showNearbyStores(n=null){const t=this.search.features.length>0;n?this.search.userLocation=n:n=this.search.userLocation;this.search.autocomplete.control.className="dropdown-menu";this.store.popup.close();this.map.markers.clear();this.map.markers.add(new atlas.HtmlMarker({color:"DodgerBlue",htmlContent:'<i class="bi bi-dot" style="font-size: 2rem; color: {color};"><\/i>',position:n,anchor:"center"}));this.map.setCamera({center:n,zoom:10});this.getNearbyStores(n,this.search.features).then(n=>{let i="",r=0,u=[];t&&(i='<div class="alert alert-info" role="alert">Feel free to modify the filters if the results don\'t match your expectations.<\/div>');n.sort((n,t)=>n.distanceInKm-t.distanceInKm);n.forEach(n=>{n.orderNumber=r+1;const t=new atlas.data.Position(n.location.coordinates[0],n.location.coordinates[1]),f=new atlas.data.Feature(new atlas.data.Point(t),n,n.id);u.push(f);r++<this.options.maxSearchResults&&(i+=this.search.resultsTemplate.replace("{id}",n.id).replace("{imageUrl}",n.imageUrl).replace("{name}",n.name).replace("{address}",n.address.streetAddressLine1).replace("{city}",n.address.city).replace("{country}",n.address.countryName).replace("{distanceInKm}",n.distanceInKm.toFixed(1)).replace("{distanceInMile}",this.convertToMiles(n.distanceInKm).toFixed(1)).replace("{orderNumber}",n.orderNumber).replace("{longitude}",t[0]).replace("{latitude}",t[1]))});this.store.datasource.clear();this.store.datasource.add(u);n.length==0&&(i+='<div class="alert alert-warning alert-dismissible" role="alert">No Results Found.<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"><\/button><\/div>');this.search.resultsControl.innerHTML=i;this.map.resize()});this.drawDrivingIsochrone(n);this.drawWalkingIsochrone(n)}async drawDrivingIsochrone(n){const t=this.isochrone.url.replace("{query}",[n[1],n[0]]).replace("{traffic}",!0).replace("{travelMode}","car").replace("{timeBudgetInSec}",this.options.drivingTime*60);try{const i=await this.processRequest(t),n=new atlas.data.Position.fromLatLngs(i.reachableRange.boundary),r=n[0];n.push(r);this.isochrone.drivingDataSource.clear();this.isochrone.drivingDataSource.add(new atlas.data.LineString(n))}catch(i){console.error("Error drawing driving isochrone:",i)}}async drawWalkingIsochrone(n){const t=this.isochrone.url.replace("{query}",[n[1],n[0]]).replace("{traffic}",!1).replace("{travelMode}","pedestrian").replace("{timeBudgetInSec}",this.options.walkingTime*60);try{const i=await this.processRequest(t),n=new atlas.data.Position.fromLatLngs(i.reachableRange.boundary),r=n[0];n.push(r);this.isochrone.walkingDataSource.clear();this.isochrone.walkingDataSource.add(new atlas.data.LineString(n))}catch(i){console.error("Error drawing walking isochrone:",i)}}async getStoresByCountry(n){const t=await fetch(`/api/stores/search?country=${n}`);if(!t.ok)throw new Error(`Network response was not ok: ${t.status} ${t.statusText}`);return await t.json()}async getFeatures(){const n=await fetch("/api/stores/features");if(!n.ok)throw new Error(`Network response was not ok: ${n.status} ${n.statusText}`);return await n.json()}async getNearbyStores(n,t=[]){const i=await fetch(`/api/stores/search?latitude=${n[1]}&longitude=${n[0]}&rangeInKm=${this.options.rangeInKm}&tags=${t}`);if(!i.ok)throw new Error(`Network response was not ok: ${i.status} ${i.statusText}`);return await i.json()}async searchStores(n,t=5){n=encodeURIComponent(n);const i=await fetch(`/api/stores/search?query=${n}&limit=${t}`);if(!i.ok)throw new Error(`Network response was not ok: ${i.status} ${i.statusText}`);return await i.json()}async processRequest(n){n=n.replace("{azMapsDomain}",atlas.getDomain());var i=this.map.authentication.signRequest({url:n}),r=this.map.getServiceOptions().transformRequest;r&&(i=r(n));const t=await fetch(i.url,{method:"GET",mode:"cors",headers:new Headers(i.headers)});if(!t.ok)throw new Error(`Network response was not ok: ${t.status} ${t.statusText}`);return t.json()}convertToMiles(n){return n>0?n/1.60934:0}}